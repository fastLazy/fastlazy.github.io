"use strict";(self.webpackChunkfastlazy_github_io=self.webpackChunkfastlazy_github_io||[]).push([[786],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),i=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=i(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),y=i(n),m=a,f=y["".concat(u,".").concat(m)]||y[m]||p[m]||o;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=y;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var i=2;i<o;i++)s[i]=n[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},4233:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var r=n(4250),a=(n(9496),n(9613));const o={},s="useLazyQuery",l={unversionedId:"Apollo/useLazyQuery",id:"Apollo/useLazyQuery",title:"useLazyQuery",description:"",source:"@site/docs/Apollo/useLazyQuery.md",sourceDirName:"Apollo",slug:"/Apollo/useLazyQuery",permalink:"/docs/Apollo/useLazyQuery",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"Apollo",previous:{title:"\u5feb\u901f\u5f00\u59cb",permalink:"/docs/Apollo/setup"},next:{title:"useMutation",permalink:"/docs/Apollo/useMutation"}},u={},i=[],c={toc:i};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"uselazyquery"},"useLazyQuery"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { gql } from "@apollo/client";\n\nexport const GET_USER_LIST = gql`\n  input UserInput {\n    name: String!\n  }\n\n  query GetList($where: UserInput!, $limit: Int!, $offset: Int!) {\n    users_aggregate(where: $where, limit: $limit, offset: $offset) {\n      nodes {\n        email\n        id\n        name\n        password\n      }\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { useLazyQuery } from "@apollo/client";\n\nconst [getUsers, { loading }] = useLazyQuery(GET_USER_LIST, {\n  fetchPolicy: "network-only",\n});\nconst getList = async (params: {\n  current: number,\n  pageSize: number,\n  name: string,\n}) => {\n  const result = await getUsers({\n    variables: {\n      offset: (params.current - 1) * params?.pageSize, // \u5206\u9875\u504f\u79fb\u91cf:(\u5f53\u524d\u9875\u7801 - 1) * pageSize\n      limit: params?.pageSize,\n      where: {\n        name: {\n          _like: `%${params.name ?? ""}%`,\n        },\n      },\n    },\n  });\n\n  return {\n    data: result.data?.users_aggregate?.nodes,\n    total: result.data?.users_aggregate?.aggregate?.count,\n    success: true,\n  };\n};\n')))}p.isMDXComponent=!0}}]);