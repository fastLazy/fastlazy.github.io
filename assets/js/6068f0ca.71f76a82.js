"use strict";(self.webpackChunkfastlazy_github_io=self.webpackChunkfastlazy_github_io||[]).push([[574],{9613:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>m});var n=t(9496);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function u(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),l=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},c=function(e){var r=l(e.components);return n.createElement(i.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),y=l(t),m=a,f=y["".concat(i,".").concat(m)]||y[m]||p[m]||o;return t?n.createElement(f,s(s({ref:r},c),{},{components:t})):n.createElement(f,s({ref:r},c))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=y;var u={};for(var i in r)hasOwnProperty.call(r,i)&&(u[i]=r[i]);u.originalType=e,u.mdxType="string"==typeof e?e:a,s[1]=u;for(var l=2;l<o;l++)s[l]=t[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},2791:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>u,toc:()=>l});var n=t(4250),a=(t(9496),t(9613));const o={},s="useLazyQuery",u={unversionedId:"Graphql/useLazyQuery",id:"Graphql/useLazyQuery",title:"useLazyQuery",description:"",source:"@site/docs/Graphql/useLazyQuery.md",sourceDirName:"Graphql",slug:"/Graphql/useLazyQuery",permalink:"/docs/Graphql/useLazyQuery",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"Graphql",previous:{title:"\u5feb\u901f\u5f00\u59cb",permalink:"/docs/Graphql/setup"},next:{title:"useMutation",permalink:"/docs/Graphql/useMutation"}},i={},l=[],c={toc:l};function p(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"uselazyquery"},"useLazyQuery"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { gql } from "@apollo/client";\n\nexport const GET_USER_LIST = gql`\n  input UserInput {\n    name: String!\n  }\n\n  query GetList($where: UserInput!, $limit: Int!, $offset: Int!) {\n    users_aggregate(where: $where, limit: $limit, offset: $offset) {\n      nodes {\n        email\n        id\n        name\n        password\n      }\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { useLazyQuery } from "@apollo/client";\n\nconst [getUsers, { loading }] = useLazyQuery(GET_USER_LIST, {\n  fetchPolicy: "network-only",\n});\nconst getList = async (params: {\n  current: number,\n  pageSize: number,\n  name: string,\n}) => {\n  const result = await getUsers({\n    variables: {\n      offset: (params.current - 1) * params?.pageSize, // \u5206\u9875\u504f\u79fb\u91cf:(\u5f53\u524d\u9875\u7801 - 1) * pageSize\n      limit: params?.pageSize,\n      where: {\n        name: {\n          _like: `%${params.name ?? ""}%`,\n        },\n      },\n    },\n  });\n\n  return {\n    data: result.data?.users_aggregate?.nodes,\n    total: result.data?.users_aggregate?.aggregate?.count,\n    success: true,\n  };\n};\n')))}p.isMDXComponent=!0}}]);